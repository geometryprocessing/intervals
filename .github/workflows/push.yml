on:
  push:
    branches:
    - master
name: Push Event
jobs:
  ####################
  # Linux / macOS
  ####################
  Unix:
    name: ${{ matrix.name }} (${{ matrix.config }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        name: [
          ubuntu-18.04-gcc-7,
          ubuntu-18.04-gcc-8,
          ubuntu-18.04-gcc-9,
          ubuntu-18.04-clang-7,
          ubuntu-18.04-clang-8,
          ubuntu-18.04-clang-9,
          macOS-latest,
        ]
        config: [Release]
        include:
          - name: ubuntu-18.04-gcc-7
            os: ubuntu-18.04
            compiler: gcc
            version: "7"

          - name: ubuntu-18.04-gcc-8
            os: ubuntu-18.04
            compiler: gcc
            version: "8"

          - name: ubuntu-18.04-gcc-9
            os: ubuntu-18.04
            compiler: gcc
            version: "9"

          - name: ubuntu-18.04-clang-7
            os: ubuntu-18.04
            compiler: clang
            version: "7"

          - name: ubuntu-18.04-clang-8
            os: ubuntu-18.04
            compiler: clang
            version: "8"

          - name: ubuntu-18.04-clang-9
            os: ubuntu-18.04
            compiler: clang
            version: "9"

          - name: macOS-latest
            os: macOS-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v1
        with:
          fetch-depth: 10

      - name: Dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
            sudo apt-get update -y
            sudo apt-get install -y llvm
            if [ "${{ matrix.compiler }}" = "gcc" ]; then
              sudo apt-get install -y g++-${{ matrix.version }}
              echo "::set-env name=CC::gcc-${{ matrix.version }}"
              echo "::set-env name=CXX::g++-${{ matrix.version }}"
            else
              sudo apt-get install -y clang-${{ matrix.version }}
              echo "::set-env name=CC::clang-${{ matrix.version }}"
              echo "::set-env name=CXX::clang++-${{ matrix.version }}"
            fi

      - name: Dependencies (macOS)
        if: runner.os == 'macOS'
        run: brew install gmp

      - name: Configure
        run: |
          cd interval_operations/src && ./compile.sh 
          cd ../../
          rm -rf build && mkdir build && cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
      # - name: Free Disk Space
      #   if: runner.os == 'Linux'
      #   run: |
      #       sudo swapoff -a
      #       sudo apt clean
      #       sudo rm -rf /swapfile /usr/share/dotnet /usr/local/lib/android /opt/ghc
      #       df -h
      - name: Build
        if: runner.os == 'Linux'
        run: |
          cp interval_operations/src/*.so build/
          cd build
          make -j2

      - name: Build
        if: runner.os == 'macOS'
        run: cd build; make -j2

      - name: Tests
        run: cd build; ./unit_tests

  
  ####################
  # Windows
  ####################

  Windows:
    runs-on: windows-2019
    env:
      CC: cl.exe
      CXX: cl.exe
    strategy:
      fail-fast: false
      matrix:
        config: [Release]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v1
        with:
          fetch-depth: 10
      - uses: seanmiddleditch/gha-setup-ninja@master

      - name: Stetup Conda
        uses: s-weigand/setup-conda@v1
        with:
          conda-channels: anaconda, conda-forge
          activate-environment: ftetwild
          python-version: 3.6

      - name: Set GMP env
        run: echo "::set-env name=GMP_LIB::C:\Miniconda\Library\lib"


      - name: Install mpir
        shell: powershell
        run: |
          conda install -c conda-forge mpir -y

      - name: Set env
        run: |
          echo "::set-env name=appdata::$($env:LOCALAPPDATA)"
          echo "::set-env name=GMP_INC::C:\Miniconda\Library\include"

      - name: Set GMP env
        run: echo "::set-env name=GMP_LIB::C:\Miniconda\Library\lib"

      - name: Cache build
        id: cache-build
        uses: actions/cache@v1
        with:
          path: ${{ env.appdata }}\Mozilla\sccache
          key: ${{ runner.os }}-${{ matrix.config }}-${{ matrix.static }}-cache

      - name: Prepare sccache
        run: |
          Invoke-Expression (New-Object System.Net.WebClient).DownloadString('https://get.scoop.sh')
          scoop install sccache --global
          # Scoop modifies the PATH so we make the modified PATH global.
          echo "::set-env name=PATH::$env:PATH"
        # We run configure + build in the same step, since they both need to call VsDevCmd
        # Also, cmd uses ^ to break commands into multiple lines (in powershell this is `)
      - name: Compile dll
        shell: cmd
        run: |
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\Common7\Tools\VsDevCmd.bat" -arch=x64
          cd interval_operations\src
          cl /LD /O1 /DBUILD_DLL interval_c.cc
          dir

      - name: Configure and build
        shell: cmd
        run: |
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\Common7\Tools\VsDevCmd.bat" -arch=x64
          cmake -G Ninja ^
            -DCMAKE_CXX_COMPILER_LAUNCHER=sccache ^
            -DCMAKE_BUILD_TYPE=${{ matrix.config }} ^
            -B build ^
            -S .
          cmake --build build
          
      - name: Tests
        shell: cmd
        run: |
          set PATH=%PATH%;D:\a\intervals\intervals\interval_operations\src;
          cd build
          dir
          unit_tests.exe
